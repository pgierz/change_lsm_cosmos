#!/bin/ksh

###############################################################################
#                              EXAMPLE.run
#   Automatically generated by Create_TASKS.frm using the m4 macro processor.
###############################################################################
#
#   R U N - Script for the model configuration cosmos-aso
#
#   COSMOS-ASO is a coupled model configuration with the components
#      ECHAM5 - global atmosphere GCM (MPI-HH)
#      JSBACH - global land surface model (MPI-HH)
#      MPIOM  - global ocean GCM (MPI-HH)
#
###############################################################################
#PBS -l cputim_job=20000          # run time
#PBS -l memsz_job=60000mb         # Memory per node
#PBS -l cpunum_job=4              # number of processors per node
#PBS -l elapstim_req=5000         # job time
#PBS -j o                         # join err and out to out
#PBS -T mpisx
#PBS -S /bin/ksh                  # NQSII Synatx to set the shell
#PBS -M paul.gierz@awi.de      # email address
###############################################################################
#
#
#------------------------------------------------------------------------------
#
#     IMPORTANT
#
#     This script has been adapted for use on SX-ACE
#
#     Note, that this script may still contain bugs;
#     in case you notice any errors or strange behavior please get back to either
#     Christian Stepanek or Martin Werner for assistance and bugfix suggestions.
#
#     Differences with respect to the old version of the script on SX-8:
#     -various fixes of paths, tools, and of the PBS directives in the header
#     -the internal orbital solution of ECHAM5 has been switched off by default
#      (echo "  L_ORBVSOP87 = .FALSE." >>  namelist.echam)
#     -if millenium_ctrl is set to true, the simulation now is based on PI
#      orbital forcing and greenhouse gas concentrations
#     -commands to increase ENSTDIF (in order to remove numerical instabilities)
#      have been added to the namelist - uncomment these for one iteration
#      year if you get, e.g., high windspeed errors
#
#                                                  08.07.15, Christian Stepanek
#
#     - necessary changes for water isotope code added, 15.07.15, M. Werner
#
#------------------------------------------------------------------------------
#
#
#------------------------------------------------------------------------------
#
#     0. PROLOGUE
#
#------------------------------------------------------------------------------
set -e
export task=RUN     # The task: RUN, ARCH, POST, VIS, MON, REM
#
print "\n This ${task} script starts                  at\t$(date | tr -s ' ' | cut -f2-4 -d' ') on host $(hostname)\n"
#


###############################################################################
#
#        SETUP OF EXPERIMENT EXAMPLE
#
###############################################################################
#
#-- Experiment ID
#

export expid=LIG130_dles_nbs # PG

#
#-- Coupled model name
#

export cplmod=cosmos-aso

#
#-- Node name of the computing host
#

export node=ace

#------------------------------------------------------------------------------
# Setup of COSMOS-ASO
#------------------------------------------------------------------------------
#-- Component model names
#
atmmod=echam5
srfmod=jsbach
ocemod=mpiom
coupler=oasis3

components="echam5 jsbach mpiom"

###############################################################################
#
#     1. USER INTERFACE
#
###############################################################################
#------------------------------------------------------------------------------
#   1.1 COMPONENT MODELS
#------------------------------------------------------------------------------
#
#-- ECHAM5
#
res_atm=T31          # horiozontal grid resolution
                     #       T21  / T31  / T42 / T63 / T85 / T106 / T159
vres_atm=19          # number of vertical levels
                     #       19   / 19   / 19  / 31  / 31  / 31   / 31
atmvers=cosmos-aso   # atmosphere model version (used in executable name)
out_filetype=GRIB    # output file format: GRIB / NETCDF
arch_format=RAW      # archive file format: RAW / GRIB_SZIP
dt_write_atm=6       # time interval of output writing in hours
lhd=yes              # hydrological discharge model activated
co2_transport=false  # true: prognostic CO2 mass mixing ratio
                     # false: uniform volume mixing ratio of CO2
millennium_ctrl=true # use namelist parameters for permanent year 800 (RADCTL)
volc_forc=false      # true: volcanic forcing: provide volc_data and rad_table
save_dblrad=false    # true: handle instantanous flux anomalies (accuflx) 

#
#-- JSBACH
#
dynveg=true           # calculate dynamic vegetation
dynveg_feedback=true  # activate feedback of dynamic vegetation on jsbach
ntiles=8              # number of tiles
read_cpools=false     # read cpools from file at the beginning of an experiment:
                      #      true/false
lc_change=false       # land cover change: read in cover fractions at the
                      #      beginning of each run: true/false
read_fpc=true         # read fractional plant cover from file at the beginning
                      #      of the expteriment: true/false
refyear=800           # reference year of initial data (e.g. cpools, fpc)
lctlibvers=""         # lctlib file version. Default: "". Chose "albedo_snow"
                      #      for millennium-like setup (no litter pools).
jsb_standalone=false

#
#-- MPIOM
#
res_oce=GR30         # horiozontal grid resolution (acronym)
                     #      GR30   /  GR15
vres_oce=40          # number of vertical levels
                     #      20/40  /   40
ocevers=cosmos-aso   # ocean model version (used in executable name)

#
#-- COUPLER
#
jobname=EXA          # OASIS experiment-id (3 characters)
nlogprt=0            # Standard output extent:
                     #    0: little
                     #    1: much
                     #    2: very much std. output
ncplvers="_wiso"     # namcouple version
                     #   "" for the default namcouple
                     #   for usage of an altenative namcouple: place it in 
                     #     prism/util/running/adjunct_files/oasis3 
                     #   and append the namcouple version to its name:
                     #     namcouple_'cplmod''ncplvers'
run_mode=concurrent  # sequential / concurrent (=parallel)

# remapping parameters

scripwr=1      # writing of SCRIP remapping matrices
               #   0: use SCRIP matrice if existing; else (re)calculation
               #   1: unconditional (re)calculation of SCRIP matrices

gridswr=1      # writing of grid description files for OASIS   
               #   0: use grid descript. files if existing; else (re)generation
               #   1: unconditional (re)generation of grid description files

extrapwr=1     # writing of extrapolation matrix (NINENN)
               #   0: use of existing extrapolation matrix (error if not 
               #      available)
               #   1: unconditional (re)generation of the extrapolation matrix
               #  Note: if gridswr=1 extrapwr needs to be 1 too

# time interval of data exchange

dto2a=86400    # coupling time step from ocean to atmosphere (86400/43200) [s]
               # Note: coupling time step from atmosphere to ocean is 86400 s

# treatment of coupling fields (see OASIS documentation for more information)

timtranso2a=AVERAGE   # INSTANT / AVERAGE
export=EXPORTED       # EXPORTED / EXPOUT

#
#-- Water Isotopes
#
lwiso=true            # switch on/off water isotope diagnostics

#------------------------------------------------------------------------------
#   1.2 TASK SPECIFICATION
#------------------------------------------------------------------------------
#
#-- preprocessing:   yes: create and run a script for preprocessing
#                    no:  no preprocessing
preprocessing=no

#
#-- postprocessing:  yes: create and run a script for postprocessing
#                    no:  no postprocessing
postprocessing=no

#
#-- splitting:       yes: split multi code output in codes (only possible, if postprocessing=yes)
#                    no:  no splitting of codes
splitting=no

#
#-- dbfill:          yes: fill database according code lists (only possible, if postprocessing=yes and splitting=yes)
#                    no:  no data base filling
dbfill=no

#
#-- monitoring :     yes: create and run a script for monitoring
#                    no:  no monitoring
monitoring=no

#
#-- archiving:       yes: create and run a script for archiving
#                    no:  no archiving
archiving=no

#------------------------------------------------------------------------------
#   1.3 TIME CONTROL
#------------------------------------------------------------------------------
#-- declarations
integer nyear nmonth nday nhour nminute nsecond

#
#-- calendar type: Available calendar options:
#     0   : No leap year (365 days per year)
#     1   : Gregorian (365/366 days per year)
#     n   : Equal months of "n" days (30 for 30 day months)

caltype=1

#
#-- initial and final date of the experiment
#   Format: YearMMDD[_hh[mm[ss]]], Year-MM-DD[_hh[:mm[:ss]]] or 
#           Year-MM-DD[Thh[:mm[:ss]]]
#   Note: The experiment will not stop within a run/chunk even if the
#         final date is reached.

initial_date=0800-01-01 # initial date of the experiment
final_date=2700-12-31   # final date of the experiment

#
#-- duration of a run/chunk
#      Specify the length of each run in one of the below units.

nyear=0          # number of years per run
nmonth=0         # number of months per run
nday=1           # number of days per run
nhour=0          # number of hours per run
nminute=0        # number of minutes per run
nsecond=0        # number of seconds per run
nstep_atm=0      # number of atmosphere model time steps per run
nstep_oce=0      # number of ocean model time steps per run

#------------------------------------------------------------------------------
#   1.4 ARCHIVE
#------------------------------------------------------------------------------
#
#--  use_initial_tarfile  - Get initial data from a tar file 
#         yes:   get initial data tar file from 'archive_in'
#          no:   all initial data is in place (short term archive 'data')

use_initial_tarfile=no # PG: this implies that you need to copy the inputs by hand.
# PG: an initial start from the tarfile doesn't work because some of the required fields are missing.

#
#-- tag to distinguish between different input data files
#

tag=""

#
#-- file and directory permissons of the output
#

export dir_permits=755
export file_permits=644

#--  fill_archive_in  - Store data from the tarfile as single files in
#                'archive_in'. This allows for usage with different experiments
#                (only with use_initial_tarfile=yes)
#         yes:   the data shall be stored as single files in 'archive_in'
#          no:   'archive_in' is not used 

fill_archive_in=no
suppress_links=yes

#
#--  archiving_onlyraw
#          yes:           archive only raw files (default)
#           no:           archive as well postprocessed files
#
archiving_onlyraw=yes

#
#--  archiving_host - Node name of an archiving machine (if different from the
#                     compute or data processing platform )

# export archiving_host="cross.dkrz.de" setting if you run your model at on cross, but data processing is performed on a remote host and archive is the DKRZ archive on cross again
# export archiving_host="gridftp.dkrz.de" setting for running on tornado and archiving by gridftp on the DKRZ archive
export archiving_host=""

#------------------------------------------------------------------------------
#   1.5 MESSAGE PASSING
#------------------------------------------------------------------------------

#
#-- launching mode (spawned by coupler: MPI2; MPI1 otherwise)
#

message_passing=MPI1

#
#-- buffered MPI Send 
#      yes: buffered send
#       no: simple send

bsend=yes

# number of processors

nproca_atm=3   # (=6 for T63) total number of MPI processors for the atmosphere is
nprocb_atm=1   #    nproca * nprocb
nproma_atm=1536 # (=3072 for T63) vector length (http://svn.zmaw.de/echam5/decomposition.html)
                # check/correct nproma_atm when you change the number of processors
nthreadatm=1   # number of openMP threads for the atmosphere model

nproca_oce=1   # total number of MPI processors for the ocean is
nprocb_oce=1   # (=2 for T63)   nproca * nprocb
nthreadoce=1   # number of openMP threads for the ocean model

#
#-- number of processors used for the mpiexec
#

nprocmpi=0

#------------------------------------------------------------------------------
#   1.6 FILE SYSTEMS
#------------------------------------------------------------------------------
#
#-- home:  Permanent file system for the SCRIPTS on the COMPUTING HOST
#          (only needs to be specified if the tasks are NOT generated on the 
#          computing host)

#export home=/home/sx8/mwerner/cosmos-wiso/experiments/cosmos-aso
export home=/ace/user/pgierz/cosmos/branches/cosmos-wiso/experiments/cosmos-aso/

#
#-- archive_in:  Root directory of the LONG TERM INPUT data archive. It needs
#                to reside on the same machine as the output archive. This 
#                archive is intended for input data that is needed with 
#                several experiments, e.g. initial , forcing or restart files.
#
#  - The parent-directory of ${archive_in} needs to exist before submission of the job- 

export archive_in=/ace/user/paleo/input_data/cosmos-wiso/PresentDay

#
#-- data:  Root directory of the SHORT TERM data server.
#          Model INPUT and OUTPUT will be read from/written to 
#          this file system of the computing host
#
#  - The parent-directory of ${data} needs to exist before submission of the job 

export data=${home}

#
#-- archive:  Root directory of the LONG TERM OUTPUT data archive.
#             - Either a filesystem of the computing host or of a remote archiving host. 
#             If ${archive} differs from ${data} model output will be saved in 
#             ${archive} and removed from ${data}.
#
#  - The parent-directory of ${archive} needs to exist - 

export archive=${data}

#
#-- work:  Root directory for the temporary working directory
#             (for production runs use $TMPDIR on NEC)
#

work=${home}

#
#-- Compilation
#
#       compile_server: Node name of the compile-server
#         compile_path: Directory where the executables are stored
#                       on the compile-server

compile_server=ace
compile_path=/ace/user/paleo/models/cosmos-wiso/SX/bin
#compile_path=/home/ace/mwerner/cosmos-wiso/SX/bin

#
#-- Path to the IMDI function directory
#
export fpath=/ace/user/paleo/models/cosmos-wiso/util/running/functions
export PATH=${fpath}:$PATH
#------------------------------------------------------------------------------
#   1.7 RESTART CONTROL
#------------------------------------------------------------------------------ 
#
#-- 'component'_restart: start from restart or initial files (climatology)
#         1  : start experiment from restart files for 'component'
#         0  : start experiment from initial conditions for 'component'
#      If the experiment starts from restart files you need to specify:
# 
#   'component'_age: the age of the restart file used in years
#   'component'_restart_file: filename of the restart file (including path)
#

atm_restart=0
atm_age=0
atm_restart_file=${data}/${expid}/restart/echam5/rerun_echam.nc
#atm_restart_tracer=${data}/${expid}/restart/echam5/rerun_tracer.nc
atm_restart_co2=${data}/${expid}/restart/echam5/rerun_co2.nc
#atm_restart_accu=${data}/${expid}/restart/echam5/rerun_accuflx.nc
hd_restart_file=${data}/${expid}/restart/echam5/hdrestart.nc

srf_restart=0
srf_age=0
srf_restart_jsbach=${data}/${expid}/restart/jsbach/rerun_jsbach.nc
srf_restart_surf=${data}/${expid}/restart/jsbach/rerun_surf.nc
srf_restart_veg=${data}/${expid}/restart/jsbach/rerun_veg.nc

oce_restart=0
oce_age=0
oce_restart_file=${data}/${expid}/restart/mpiom/rerun_mpiom.ext

cpl_restart=0
cpl_restart_file_sstocean=${data}/${expid}/restart/oasis3/sstocean.nc
cpl_restart_file_flxatmos=${data}/${expid}/restart/oasis3/flxatmos.nc

wiso_atm_restart=0
atm_restart_wiso=${data}/${expid}/restart/echam5/rerun_echam_wiso.nc
hd_restart_wiso=${data}/${expid}/restart/echam5/hdrestart_wiso.nc
srf_restart_jsbach_wiso=${data}/${expid}/restart/jsbach/rerun_jsbach_wiso.nc
srf_restart_surf_wiso=${data}/${expid}/restart/jsbach/rerun_surf_wiso.nc
wiso_oce_restart=0
oce_restart_wiso=${data}/${expid}/restart/mpiom/restartw_add.nc

#------------------------------------------------------------------------------
#   1.8 PLATFORM DEPENDEND SPECIFICATIONS
#------------------------------------------------------------------------------
#
#-- batch queueing system ( PBS | SGE | LL | NQS2 | LSF )
#
queueing_system=NQS2

#
#-- email address (for NQS)
#
email=paul.gierz@awi.de

#
#-- account (for NQS)
#
account=default       # DKRZ account number ("default" for default account) 

#
#-- queue (for NQS)
#
queue=default         # queue name ("default" for default queue) 

#
#-- Path to the NQS2 commands (e.g. qsub)
#
export PATH=/usr/bin/nqsII:$PATH

#
#-- Export System depending variables
#
export F_PROGINF=NO
export F_FTRACE=NO
export MPLARGS=" "
export MPIPROGINF=ALL_DETAIL
export MPISUSPEND=ON
export MPISUSPENDCTL=SUSPEND
export OMP_NUM_THREADS=1

#
#--  Set size of outbut buffer to 4 MB:
#
export F_SETBUF=4096
# export F_SETBUF06=0  #  Set these standard output buffer sizes to 0
# export F_SETBUF07=0  #    in case of debug
# export F_SETBUF08=0

#
#--  Line length for stdout
#
export F_SYSLEN=600

#
# -- Stop execution after the first run time error
#
export F_ERRCNT=0

#------------------------------------------------------------------------------
#   1.9 UNIX COMMANDS
#------------------------------------------------------------------------------

export cp=cp             # copy without preserving the time stamp
export ln="ln -s"        # soft link (if no links are wanted: same as cp)
export rm=rm             # remove
export rtp=ftp           # remote transfer protocol
export rtp_post=$rtp     # transfer protocol to remote processing host
export put_archive=""    # special command to put files to band archive (e.g. dsmc)
export get_archive=""    # special command to get files from band archive (e.g. dsmc)
export gunzip="gzip -d"  # unzip a file that was zipped using gzip
export job_account=""    # command to receive job account at the end of the run
export qsub=qsub         # command to submit a job ("" for interactive use)

export cdo=/home/repo/frontend/cdo/cdo-1.6.8rc3/bin/cdo   || status=$? # climate data operator
export python=/usr/bin/python                             || status=$?      # python

#------------------------------------------------------------------------------
#   1.10 REMOTE DATA PROCESSING
#------------------------------------------------------------------------------

#
#-- Perform data processing on remote host: yes/no
#
postprocessing_rem=no              # yes/no
monitoring_rem=no                  # yes/no
dbfill_rem=no                      # yes/no
archiving_rem=no                   # yes/no

#
#-- data_rem:  Location, where data processing (postprocessing etc.) should be performed.
#              It is specified as [processing_host:][processing_path], e.g.
#
#              data_rem=$data                  default, i.e processing in the directory 
#                                              ($data) on the compute (frontend) host
#              data_rem=mil00.zmaw.de:/mil00   TPP: processing on host mil00.zmaw.de 
#                                              in the working directory /mil00
data_rem=$data
[[ $(print ${data_rem} | grep :) = "" ]] && host_rem="" || host_rem=${data_rem%%:*}
path_rem=${data_rem#*:}

#
#-- qsub_rem:  Submit command for the processing jobs on remote host
#
#              qsub_rem=$qsub                     default, i.e. processing jobs are submitted
#                                                 with the same command as the run job ($qsub)
#              qsub_rem=sge_qsub                  TPP
#              qsub_rem='ssh [-l user] nohup'     processing on remote host without 
#                                                 queueing system (interactive) 
qsub_rem=$qsub
qsub_rem_sync=$qsub_rem' -sync y'                 # wait for the job to complete before exiting

#
#-- Path to the IMDI function directory on remote processing host
#
fpath_rem=${path_rem}/${expid}/functions
[[ "${fpath}" = "${fpath_rem}" ]] || export PATH=$PATH:${fpath_rem}

#
#-- Submit host (i.e. compute or frontend node)
#
submit_host=stan1.awi.de

#
#-- chron_proc:  Data processing in chronological order: yes/no
#
chron_proc=yes

###############################################################################
#
#      END OF THE USER INTERFACE
#
###############################################################################

set -e
#
# Do not use soft links if work directory is on a different file system 
# than data directory (significant performance gain by using cp)
#
fs_work=$(df $work | grep -v "ilesystem")
fs_data=$(df $data | grep -v "ilesystem")
if [ "${fs_work%% *}" != "${fs_data%% *}" ]; then
  ln=${cp}
fi

#
#-- Number of openMP threads
#
export MPIOM_THREADS=${nthreadoce}
export ECHAM5_THREADS=${nthreadatm}
export MPIEXPORT="MPIOM_THREADS ECHAM5_THREADS"

#------------------------------------------------------------------------------
#
#  Complete setup of COSMOS-ASO (parameters wich cannot be changed)
#
#------------------------------------------------------------------------------
#
# declarations
#

integer ntproc nprocatm nprococe nprocmpi ncplprocatm ncplprococe

#
# treatment of coupling fields
#
timtransa2o=INSTANT

#
# Exchange time steps
#
dta2o=86400
dto2a=${dto2a}

# Parameters for ECHAM5
# ---------------------
#
#-- Time step
#
if [ ${vres_atm} = 19 ]; then
  if [ ${res_atm} = T21 ]; then
    nadt=2400
  elif [ ${res_atm} = T31  ]; then 
    nadt=2400
  elif [ ${res_atm} = T42  ]; then
    nadt=1800
  elif [ ${res_atm} = T63  ]; then
    nadt=1200
  elif [ ${res_atm} = T85  ]; then
    nadt=900
  elif [ ${res_atm} = T106 ]; then
    nadt=720
  fi
elif [ ${vres_atm} = 31 ]; then
  if [ ${res_atm} = T31  ]; then 
    nadt=1800
  elif [ ${res_atm} = T42  ]; then
    nadt=1200
  elif [ ${res_atm} = T63  ]; then
    nadt=720
  elif [ ${res_atm} = T85  ]; then
    nadt=480
  elif [ ${res_atm} = T106 ]; then
    nadt=360
  elif [ ${res_atm} = T159 ]; then
    nadt=240
  fi
fi

# Parameters for MPIOM
# --------------------
#
#-- Time step and grid dimensions
#
if [ ${res_oce} = GR30 ]; then
  nx_oce=122
  ny_oce=101
  nodt=8640
elif  [ ${res_oce} = GR15 ]; then
  nx_oce=256
  ny_oce=220
  nodt=4320
elif  [ ${res_oce} = T43 ]; then
  nx_oce=130
  ny_oce=211
  nodt=4800
  echo " TIMESTEP NEEDS TO BE CHECKED!"
fi

#
# Parameters for JSBACH
#
res_srf=${res_atm}

#
# Number of MPI-processors/openMP-threads
# ---------------------------------------
ncplprococe=1  # number of ocean MPI processes communicating with oasis
ncplprocatm=1  # number of atmosphere MPI processes communicating with oasis

nprocatm=nproca_atm*nprocb_atm  # total number of atm. MPI processes
nprococe=nproca_oce*nprocb_oce  # total number of ocean MPI processes

# total number of MPI processes
ntproc=nprocatm+nprococe+nprocmpi+1
#------------------------------------------------------------------------------
#
#   Directory and name of this script
#
#------------------------------------------------------------------------------

if ( [ "${PBS_JOBID}" = "" ] && [ "${JOB_ID}" = "" ] ) || ( [ "${qsub_post}" = "sge_qsub" ] && [ "$task" = "ARCH" ] ); then
  export interactive_run=true
else
  export interactive_run=false
fi
if [ ${interactive_run} = false ]; then
  if [ "${PBS_JOBID}" != "" ]; then # NQSII-Job
    jobdir=${home}/${expid}/scripts       # directory of this script
    jobid=$PBS_JOBID                      # job-id
    job=$PBS_JOBNAME                      # name of this script
    print " NQS job $job with job id  $jobid is running in $jobdir\n"
  elif [ "${JOB_ID}" != "" ] && [ "$task" != "ARCH" ]; then
    ftproot=`hostname`
    jobdir=/${ftproot}/${expid}/scripts       # directory of this script
    jobid=${JOB_ID}                      # job-id
    job=${JOB_NAME}                      # name of this script
    print " SGE job $job with job id $jobid is running in $jobdir\n"
  fi
else
  jobdir=`dirname $0`
  cd ${jobdir}
  jobdir=`pwd`
  jobid=${expid}
  job=`basename $0`
  print "\n Job $job with job id $expid (= expid) runs interactively in $jobdir\n" 
fi

#------------------------------------------------------------------------------
#
#     3. CALENDAR
#
#------------------------------------------------------------------------------
#
#-- calculate length of the run in seconds for the case that (optionally)
#   the length of run is given in number of model steps of any of the models.
#
if   [ "${nstep_atm}" -ne 0 ] && [ "${nstep_atm}" -ne "" ]; then
  (( nsecond = nstep_atm * nadt ))
elif [ "${nstep_oce}" -ne 0 ] && [ "${nstep_oce}" -ne "" ]; then
  (( nsecond = nstep_oce * nodt ))
elif [ "${nstep_che}" -ne 0 ] && [ "${nstep_che}" -ne "" ]; then
  (( nsecond = nstep_che * ncdt ))
elif [ "${nstep_srf}" -ne 0 ] && [ "${nstep_srf}" -ne "" ]; then
  (( nsecond = nstep_srf * nsdt ))
fi

#
#-- find out smallest time unit in inidate and job length
#
inidate=`format_date -- ${initial_date}`   # transform to format (YearMMDD_hhmmss)
findate=`format_date -- ${final_date}`

nwords=$(format_date -f4 -- ${inidate} | wc -w) 
if [ ${nwords} -eq 6 ] || [ ${nsecond} -ne 0 ]; then
  inidate=$(format_date -s -- ${inidate})
  findate=$(format_date -s -- ${final_date})
elif [ ${nwords} -eq 5 ] || [ ${nminute} -ne 0 ]; then
  inidate=$(format_date -m -- ${inidate})
  findate=$(format_date -m -- ${final_date})
elif [ ${nwords} -eq 4 ] || [ ${nhour} -ne 0 ]; then
  inidate=$(format_date -h  -- ${inidate})
  findate=$(format_date -h  -- ${final_date})
fi

#
#-- date of this run
#

cd ${jobdir}
space_error="no"

datefmt='%a %b %d %H:%M:%S %Z %Y'  # date format for expid.log file

if [ ! -f ${expid}.date ]; then

  startdate=${inidate}
  jobnum=1
  if [ -f  ${expid}.log ]; then
    rm ${expid}.log
  fi
  print "$(date +"${datefmt}") :  Beginning of Experiment ${expid}" > ${expid}.log.new || { 
      space_error="yes"; print "Could not create ${expid}.log"; 
  }
else
  read startdate jobnum < ${expid}.date
  cp ${expid}.log ${expid}.log.new || { 
    space_error="yes"; print "Could not save ${expid}.log"; 
  }
fi

print "$(date +"${datefmt}") :  ${jobnum} ${startdate} ${jobid}  - start" >> ${expid}.log.new || { 
  space_error="yes"; print "Could not append to ${expid}.log"; 
}
if [ "${space_error}" = "no" ]; then
  mv ${expid}.log.new ${expid}.log
else
  print "  |- ERROR: No disk space left or quota exceeded?"
  exit 1
fi

integer scrcap
line=$(df -k $data | tail -1)
scrfs=${line##* }
line=${line%%\%*} ;scrcap=${line##* }

if (( scrcap > 99 )); then
  print "  |- ERROR: Less than 1% disc space left on filesystem $scrfs, where your"
  print "  |    workshare data=$data is mounted. Please clean up before you continue !"
  exit 1
fi

nextdate=$(calc_date plus -c${caltype} -Y${nyear} -M${nmonth} -D${nday} -h${nhour} -m${nminute} -s${nsecond} -- ${startdate})

print " |+ Time integration and run periode"
print "  |- Initial date of the experiment:\t${inidate}"
print  "  |- Final date of the experiment:\t${findate}"
print "   |- Beginning of this run    :\t${startdate}"
print "   |- Beginning of the next run:\t${nextdate}\n"

#------------------------------------------------------------------------------
#
#   Definition of the functions 
#
#------------------------------------------------------------------------------

. function_check_size
. function_check_codes
. function_dbfill
. function_generate_tarfile
. function_get_file
. function_get_model_resolution
. function_get_tarfile
. function_make_directories
. function_make_ppdirectories
. function_prepare_saving
. function_put_file
. function_plot_file
. function_pperror
. function_submit

#------------------------------------------------------------------------------
#
#    4. PRE PROCESSING
#
#------------------------------------------------------------------------------
#------------------------------------------------------------------------------
#   4.1 DIRECTORY DEFINITION
#------------------------------------------------------------------------------

if [ "$(hostname)" = "${host_rem%%.*}" ] ; then 
   exphome=${path_rem}/${expid}   # Root directory of the experiment (data)
else
   exphome=${data}/${expid}       # Root directory of the experiment (data)
fi
export bindir=${exphome}/bin      # Directory of the executables
export inpdir=${exphome}/input    # Directory of the input files
export restdir=${exphome}/restart # Directory of the restart files
export outdir=${exphome}/outdata  # Directory of the output data files
export logdir=${exphome}/log      # Directory of the log data files
export postdir=${exphome}/post    # Directory for postprocessed data

if [ ${jobnum} = 1 ];then
   if [ "${task}" = "RUN" ]; then
      make_directories
   elif [ "${task}" = "REM" ]; then
      make_ppdirectories
   fi
fi

#------------------------------------------------------------------------------
#
#     save log file of the previous run
#
#------------------------------------------------------------------------------
#
# find out the id of the last run
#
# PG: Begin kill
# if [ ${jobnum} != 1 ]; then
#   previd=` grep -- ${startdate} ${expid}.log | grep done | cut -d: -f5 | cut -d. -f1`
#   if [ "${previd}" = "" ]; then
#     previd=` grep -- ${startdate} ${expid}.log | grep ${expid}`
#     if [ "${previd}" != "" ]; then 
#       echo "No logfile of the previous run available (interactive run)"
#     else
#       echo "WARNING: No logfile of the previous run available!"
#     fi
#   else
#     logfile=${job}.o${previd}
#     date=` grep ":${previd}\." ${expid}.log | grep start | tr -s " " | cut -d" " -f9 | tail -1`
#     logfile_flag=0
#     while [ ${logfile_flag} = 0 ]; do
#     if [ ! -f ${jobdir}/${logfile} ] \
#        && [ ! -f ${logdir}/${job}_${date}.o${previd} ]; then
#       sleep 10
# #      sleep 300
#       echo "waiting for the log file of the previous run: ${logfile} ..."
#     else
#       logfile_flag=1
#     fi
#     done
#     if [ -f ${jobdir}/${logfile} ]; then
# # temporary fix for SX-ACE problem with slow writing of $home directory
# sleep 60
#       mv ${jobdir}/${logfile} ${logdir}/${job}_${date}.o${previd}
#       chmod ${file_permits} ${logdir}/${job}_${date}.o${previd}
#     elif [ ! -f ${logdir}/${job}_${date}.o${previd} ]; then
#       echo "No logfile of the previous run - exit"
#       exit
#     fi
#   fi
# fi
# PG End Kill
#------------------------------------------------------------------------------
#   4.3 PRE - PROCESSING : Get the input data tar-file
#------------------------------------------------------------------------------

if [ ${jobnum} = 1 ]; then
  get_tarfile ${use_initial_tarfile}
fi

#------------------------------------------------------------------------------
#   4.4 PRE - PROCESSING : Computing environment
#------------------------------------------------------------------------------

# create and go to the temporary working directory

if [ "${work}" = "" ]; then
  print "\n |- ERROR: Can't create the temporary working directory"
  print " |     Variable 'work' is empty"
  exit
fi
mkdir=mkdir
cd ${work}
if [ ! -d ${expid} ]; then
  ${mkdir} ${expid}
fi
if [ ! -d ${expid}/work ]; then
  ${mkdir} ${expid}/work
fi
cd ${expid}/work
rm -rf *

print "\n |- Temporary working directory is:\t$(pwd)"
print " |- Data workshare on compute node is:\t$data/$expid"
#------------------------------------------------------------------------------
#     4.5 PRE - PROCESSING : Provide the executables
#------------------------------------------------------------------------------

print " |+ Get executables"
oceexec=${ocemod}_${ocevers}.${message_passing}.x
atmexec=echam5j_${atmvers}.${message_passing}.x
cplexec=${coupler}.${message_passing}.x

#
# remove old executables to get them anew from the compiling host 
#
if [ ${jobnum} = 1 ]; then
  [ ! -f ${bindir}/${oceexec} ]     || rm    ${bindir}/${oceexec}
  [ ! -f ${bindir}/${atmexec} ]     || rm    ${bindir}/${atmexec}
  [ ! -f ${bindir}/${cplexec} ]     || rm    ${bindir}/${cplexec}
fi

get_file   ${ocemod}   bin   ${oceexec}       mpi-om
get_file   ${atmmod}   bin   ${atmexec}       echam5
get_file   ${coupler}  bin   ${cplexec}       oasis.x

#------------------------------------------------------------------------------
#     4.6 PRE - PROCESSING : Provide the input data 
#------------------------------------------------------------------------------

echo " |- Get input and restart data\n"

#------------------------------------------------------------------------------
# Input files for the coupler (OASIS3)
#-------------------------------------

# List of variable names according to cf conventions 
#
get_file   ${coupler}  input   cf_name_table.txt

# Grid and analysis auxiliary data files
#

FV_cpl=_frac

if [ $gridswr = 0 ] || [ $jobnum != 1 ]; then
  get_file -opt  ${coupler}  input  grids_${res_atm}_${res_oce}${FV_cpl}.nc \
                                    grids.nc
  get_file -opt  ${coupler}  input  areas_${res_atm}_${res_oce}${FV_cpl}.nc \
                                    areas.nc
  get_file -opt  ${coupler}  input  masks_${res_atm}_${res_oce}${FV_cpl}.nc \
                                    masks.nc
fi

if [ $scripwr = 0 ] || [ $jobnum != 1 ]; then
  get_file -opt ${coupler} input  \
              rmp_oces_to_atmo_CONSERV_FRACAREA_${res_atm}_${res_oce}.nc \
              rmp_oces_to_atmo_CONSERV_FRACAREA.nc
  get_file -opt ${coupler} input  \
              rmp_atmo_to_oces_CONSERV_FRACAREA_${res_atm}_${res_oce}.nc \
              rmp_atmo_to_oces_CONSERV_FRACAREA.nc
  get_file -opt ${coupler} input  \
              rmp_atmo_to_oceu_CONSERV_FRACAREA_${res_atm}_${res_oce}.nc \
              rmp_atmo_to_oceu_CONSERV_FRACAREA.nc
  get_file -opt ${coupler} input  \
              rmp_atmo_to_ocev_CONSERV_FRACAREA_${res_atm}_${res_oce}.nc \
              rmp_atmo_to_ocev_CONSERV_FRACAREA.nc
  get_file -opt ${coupler} input  \
              rmp_atmo_to_oces_BILINEA_${res_atm}_${res_oce}.nc \
              rmp_atmo_to_oces_BILINEA.nc
fi

if [ $extrapwr = 0 ] || [ $jobnum != 1 ]; then
  get_file ${coupler} input nweights_${res_atm}_${res_oce}${FV_cpl} nweights
fi

# Restart files
# -------------

prevdate=`calc_date minus -c${caltype} -D1 -- ${startdate}`
if [ ${jobnum} = 1 ]; then
  if [ ${cpl_restart} = 1 ]; then
    if [ ${run_mode} = concurrent ]; then
      \cp  ${cpl_restart_file_flxatmos}  flxatmos
    fi
    \cp  ${cpl_restart_file_sstocean}  sstocean
  fi
else
  if [ ${run_mode} = concurrent ]; then
    get_file ${coupler} restart flxatmos_${expid}_${prevdate}.nc   flxatmos
  fi
  get_file ${coupler} restart sstocean_${expid}_${prevdate}.nc   sstocean
fi

#------------------------------------------------------------------------------
# Input files for the atmosphere (ECHAM5)
#----------------------------------------

#
#-- Initialization and forcing
#   --------------------------
#
# 3d initial file of atmosphere (spectral, no dependence on lsmask)
#
get_file ${atmmod} input ${res_atm}L${vres_atm}_jan_spec.nc     unit.23

#
# surface boundary conditions (land/sea mask, albedo etc.)
#   (the original file has been modified near Antarctica (M.Esch);
#    annual mean data); file depends on lsmask
#
get_file ${atmmod} input ${res_atm}${res_oce}_jan_surf_replaced_dles_nbs.nc  unit.24

#
# AMIP sst and sea ice concentration; files depend on lsmask
#
if [ "${ocemod}" = "" ] && [ ${forcing} = amip ]; then
  typeset -Z4 yr yp1 ym1
  yr=`format_date -f4 -- ${startdate} | cut -f1 -d" "`
  (( yp1 = yr + 1 ))
  (( ym1 = yr - 1 ))
  for yrs in ${yr} ${yp1} ${ym1}; do
    get_file ${atmmod} input  ${res_atm}_amip2sst_${yrs}.nc  sst${yrs}
    get_file ${atmmod} input  ${res_atm}_amip2sic_${yrs}.nc  ice${yrs}
  done
else
  get_file ${atmmod} input ${res_atm}_amip2sst_clim.nc       unit.20
  get_file ${atmmod} input ${res_atm}_amip2sic_clim.nc       unit.96
fi

#
# ozone climatology (m.m., zonal) (no dependence on lsmask)
#
get_file ${atmmod} input ${res_atm}_O3clim2.nc             unit.21

#
# leaf area index climatology (monthly)
#
get_file ${atmmod} input ${res_atm}${res_oce}_VLTCLIM_dles_nbs.nc   unit.90

#
#  3d vegetation climatology (a.m.) (monthly)
#
get_file ${atmmod} input ${res_atm}${res_oce}_VGRATCLIM_dles_nbs.nc unit.91

#
#  land surface temperature climatology (monthly)
#
get_file ${atmmod} input ${res_atm}_TSLCLIM2.nc             unit.92

#
#  input data for radiation scheme
#
get_file ${atmmod} input surrta_data                    rrtadata

#
#  input data for water isotopes
#
if [ ${lwiso} = "true" ]; then
   wiso_path="/ace/user/paleo/input_data/ECHAM5-WISO/PresentDay/${res_atm}"
   get_file ${atmmod} input ${wiso_path}/${res_atm}_wisosw_d.nc    unit.25
fi

#
#  input data for the hydrological discharge model
#
if [ $lhd = yes ]; then
  get_file ${atmmod} input  hdpara.nc                   hdpara.nc
  get_file ${atmmod} input  hdstart.nc                  hdstart.nc
fi

#
#  input data for volcanic forcing
#
if [ ${volc_forc} = "true" ]; then
#  get_file ${atmmod} input volc_data                   volc_data
#  get_file ${atmmod} input rad_table                   rad_table
   cp ${jobdir}/volc_data                               volc_data
   cp ${jobdir}/rad_table                               rad_table
fi

#
#-- Restart files
#   -------------

if [ ${jobnum} != 1 ]; then
  prevdate=`calc_date minus -c${caltype} -D1 -- ${startdate}`
  get_file ${atmmod}  restart  rerun_${expid}_echam_${prevdate} \
                               rerun_${expid}_echam
#---wiso-code
  if [ ${lwiso} = "true" ]; then
    get_file ${atmmod}  restart  rerun_${expid}_echam_wiso_${prevdate} \
                                 rerun_${expid}_wiso
  fi
#---wiso-code-end
  if [ $lhd = yes ]; then
    get_file ${atmmod} restart hdrestart_${expid}_${prevdate}.nc \
                               hdrestart.nc
#---wiso-code
    if [ ${lwiso} = "true" ]; then
      get_file ${atmmod} restart hdrestart_wiso_${expid}_${prevdate}.nc \
                                 hdrestart_wiso.nc
    fi
#---wiso-code-end
  fi
  if [ "${save_dblrad}" = "true" ]; then
    get_file ${atmmod}  restart  rerun_${expid}_accuflx_${prevdate} \
                                 rerun_${expid}_accuflx
  fi 
  if [ "${srfmod}" = "jsbach" ]; then
    get_file ${atmmod} restart  rerun_${expid}_co2_${prevdate} \
                                rerun_${expid}_co2
  fi
  if [ "${co2_transport}" = "true" ]; then
    get_file ${atmmod} restart  rerun_${expid}_tracer_${prevdate} \
                                rerun_${expid}_tracer
  fi
elif [ ${atm_restart} = 1 ] ; then
  \cp ${atm_restart_file}    rerun_${expid}_echam
#---wiso-code
  if [[ ${lwiso} = "true" && ${wiso_atm_restart} = 1 ]]; then
    \cp ${atm_restart_wiso}   rerun_${expid}_wiso
  fi
#---wiso-code-end
  if [ "${srfmod}" = "jsbach" ]; then
    \cp ${atm_restart_co2}     rerun_${expid}_co2
  fi
  if [ $lhd = yes ]; then
    \cp ${hd_restart_file}   hdrestart.nc
#---wiso-code
    if [[ ${lwiso} = "true" && ${wiso_atm_restart} = 1 ]]; then
      \cp ${hd_restart_wiso}   hdrestart_wiso.nc
    fi
#---wiso-code-end
  fi
  if [ "${co2_transport}" = "true" ]; then
    \cp ${atm_restart_tracer}  rerun_${expid}_tracer
  fi
  if [ "${save_dblrad}" = "true" ]; then
    \cp ${atm_restart_accu}  rerun_${expid}_accuflx
  fi
fi
 
#------------------------------------------------------------------------------
# Input files for the land surface model (JSBACH)
#------------------------------------------------
#
#  input for JSBACH
#
if [[ "${ocemod}" = "" && ${alone_as_coupled} = false ]]; then
  grid=${res_srf}_${ntiles}tiles
else
  grid=${res_srf}_${res_oce}_${ntiles}tiles
fi

if [[ ${dynveg} = true ]]; then
  [[ ${lctlibvers} != "" ]] || lctlibvers=nlct11
else
  [[ ${lctlibvers} != "" ]] || lctlibvers=nlct14
fi
get_file ${srfmod} input lctlib_${lctlibvers}.def                  lctlib.def
get_file ${srfmod} input jsbach_T31_GR30_8tiles_dles_nbs.nc             jsbach.nc

if [[ ${read_cpools} = true ]]; then
  get_file ${srfmod} input Cpools_${grid}_${refyear}.nc cpools.nc
fi

if [[ ${lc_change} = true ]]; then
  get_file ${srfmod} input ${inpdir}/jsbach/land_use/cover_fract_`echo ${startdate} | cut -c1-4`_${res_srf}_${ntiles}tile.nc \
                           cover_fract.`echo ${startdate} | cut -c1-4`.nc
fi

if [[ ${read_fpc} = true ]]; then
  get_file ${srfmod} input fpc_${grid}_${refyear}.nc fpc.nc
fi

if [ "${jsb_standalone}" = "true" ]; then
  get_file  ${srfmod} input  Climate.${res_srf}.nc        climate.nc
fi

#
#-- Restart files
#   -------------

prevdate=`calc_date minus -c${caltype} -D1 -- ${startdate}`
if [ ${jobnum} != 1 ]; then
  get_file ${srfmod}  restart  rerun_${expid}_jsbach_${prevdate} \
                               rerun_${expid}_jsbach
  get_file ${srfmod}  restart  rerun_${expid}_veg_${prevdate} \
                               rerun_${expid}_veg
  if [ ${jsb_standalone} = true ]; then
    get_file ${srfmod}  restart  rerun_${expid}_forcing_${prevdate} \
                                 rerun_${expid}_forcing
    get_file ${srfmod}  restart  rerun_${expid}_driving_${prevdate} \
                                 rerun_${expid}_driving
  else
    get_file ${srfmod}  restart  rerun_${expid}_surf_${prevdate} \
                                 rerun_${expid}_surf
  fi
elif [ ${srf_restart} = 1 ] ; then
  \cp ${srf_restart_jsbach}  rerun_${expid}_jsbach
  \cp ${srf_restart_veg}     rerun_${expid}_veg
  if [ ${jsb_standalone} = true ]; then
    \cp ${srf_restart_forcing} rerun_${expid}_forcing
    \cp ${srf_restart_driving} rerun_${expid}_driving
  else
    \cp ${srf_restart_surf}    rerun_${expid}_surf
  fi
fi

#---wiso-code
if [ ${lwiso} = "true" ]; then
  if [ ${jobnum} != 1 ]; then
    get_file ${srfmod}  restart  rerun_${expid}_jsbach_wiso_${prevdate} \
                                 rerun_${expid}_js_wiso
    get_file ${srfmod}  restart  rerun_${expid}_surf_wiso_${prevdate} \
                                 rerun_${expid}_sf_wiso
  elif [ ${wiso_atm_restart} = 1 ] ; then
    \cp ${srf_restart_jsbach_wiso}  rerun_${expid}_js_wiso
    \cp ${srf_restart_surf_wiso}    rerun_${expid}_sf_wiso
  fi
fi
#---wiso-code-end

#------------------------------------------------------------------------------
# Input files for the ocean (MPIOM)
#----------------------------------

#
#-- Initialization and forcing
#   --------------------------
#
# File containing basin masks (formatted)
#
get_file ${ocemod} input ${res_oce}_BEK               BEK
chmod ${dir_permits} BEK

#
# Ocean grid and bathymetry file
#
get_file ${ocemod} input ${res_oce}_anta              anta
get_file ${ocemod} input ${res_oce}_arcgri            arcgri
get_file ${ocemod} input ${res_oce}_topo_jj_modified_dry_shelf_noBS           topo

#
# Surface salinity file (a.m. Levitus atlas).
#
get_file ${ocemod} input ${res_oce}L${vres_oce}_SURSAL_PHC  SURSAL

#
#  Initial (3D) ocean temperature/salinity file (Levitus a.m.).
#
get_file ${ocemod} input ${res_oce}L${vres_oce}_INITEM_PHC  INITEM
get_file ${ocemod} input ${res_oce}L${vres_oce}_INISAL_PHC  INISAL

#
#-- Forcing (for stand allone ocean runs)
#   -------

if [  "${message_passing}" = "NONE" ]; then
  get_file ${ocemod} input  ${res_oce}_GICLOUD_OMIP365     GICLOUD
  get_file ${ocemod} input  ${res_oce}_GIPREC_OMIP365      GIPREC
  get_file ${ocemod} input  ${res_oce}_GISWRAD_OMIP365     GISWRAD
  get_file ${ocemod} input  ${res_oce}_GITDEW_OMIP365      GITDEW
  get_file ${ocemod} input  ${res_oce}_GITEM_OMIP365       GITEM
  get_file ${ocemod} input  ${res_oce}_GIU10_OMIP365       GIU10
  get_file ${ocemod} input  ${res_oce}_GIWIX_OMIP365       GIWIX
  get_file ${ocemod} input  ${res_oce}_GIWIY_OMIP365       GIWIY
  get_file ${ocemod} input  ${res_oce}_GIRIV_OMIP365       GIRIV
fi

#
#-- Restart files
#   -------------

if [ ${jobnum} = 1 ]; then
  if [ ${oce_restart} = 1 ] ; then
    \cp ${oce_restart_file}         Z38000
    \cp ${oce_restart_file}         Z37000
  fi
else
  prevdate=`calc_date minus -c${caltype} -D1 -- ${startdate}`
  get_file ${ocemod} restart RESTART_${expid}_${prevdate}  Z38000
  get_file ${ocemod} restart RESTART_${expid}_${prevdate}  Z37000
fi

#---wiso-code
if [ ${lwiso} = "true" ]; then
  if [ ${jobnum} = 1 ]; then
    if [ ${wiso_oce_restart} = 1 ] ; then
      \cp ${oce_restart_wiso}    restartr_add.nc
    fi
  else
    # get MPIOM isotope restart file 
    get_file ${ocemod} restart RESTARTW_ADD_${expid}_${prevdate}.nc  restartr_add.nc
  fi
fi
#---wiso-code-end

#------------------------------------------------------------------------------
#     4.7 PRE - PROCESSING : 
#                 Provide and update configuration files (namelists, XML, etc.)
#------------------------------------------------------------------------------

echo "\n |- Provide configuration files (namelists, XML, etc.)"
#------------------------------------------------------------------------------
#-- Namelist OASIS3 (namcouple)
#

#
# runtime: duration of the experiment (seconds)
#
runtime=`time_between -c${caltype} -- ${startdate} ${nextdate} seconds`

#
# startdate in format YYYYMMDD
#
typeset -Z8 yyyymmdd
yyyymmdd=`echo ${startdate#-} | cut -c1-8` 

#
# sequential mode and time lag
#

# both models run seqentially when the experiment is started
if [ ${jobnum} = 1 ] && [ ${cpl_restart} = 0 ]; then
  run_mode=sequential
fi

if [ ${run_mode} = sequential ]; then
  nmseq=2                         # models run sequentially
  lago2a=$nodt
  laga2o=`expr $nadt - $dta2o`
  iseq=2
else
  nmseq=1                         # models run concurrently
  iseq=1
  lago2a=$nodt
  laga2o=$nadt
fi

#
# buffered/simple MPI send
#
if [ ${bsend} = no ]; then
  nobsend="NOBSEND"
else
  nobsend=""
fi

#
# restart filenames for the atmosphere/ocean
#
cnfileaw=flxatmos
cnfileow=sstocean

#
# loctrans
#
loctrans=LOCTRANS

#
# adaption of the namcouple template
#
get_file -nolink  ${coupler}  input  namcouple_${cplmod}${ncplvers}   namcouple

[[ $monitoring = yes ]] && monexp="EXPOUT" || monexp="$export"

ed -s namcouple <<EOF
g/#Nmseq/s/#Nmseq/${nmseq}/
g/#Chan/s/#Chan/${message_passing} ${nobsend}/
g/#Mod1procs/s/#Mod1procs/ ${nprocatm} ${ncplprocatm} $arg1 /
g/#Mod2procs/s/#Mod2procs/ ${nprococe} ${ncplprococe} $arg2 /
g/#Cplexptid/s/#Cplexptid/${jobname}/
g/#Atmmodnam/s/#Atmmodnam/${atmmod}/
g/#Ocemodnam/s/#Ocemodnam/mpi-om/
g/#Runtime/s/#Runtime/${runtime}/
g/#Yyyymmdd/s/#Yyyymmdd/${yyyymmdd}/
g/#Nlogprt/s/#Nlogprt/${nlogprt}/
g/#Dta2o/s/#Dta2o/${dta2o}/
g/#Dto2a/s/#Dto2a/${dto2a}/
g/#Iseq/s/#Iseq/${iseq}/
g/#Laga2o/s/#Laga2o/${laga2o}/
g/#Lago2a/s/#Lago2a/${lago2a}/
g/#TimTransa2o/s/#TimTransa2o/${timtransa2o}/
g/#TimTranso2a/s/#TimTranso2a/${timtranso2a}/
g/#Exp/s/#Exp/${export}/
g/#LocTrans/s/#LocTrans/${loctrans}/
g/#Extrapwr/s/#Extrapwr/${extrapwr}/
g/#Cnfileaw/s/#Cnfileaw/${cnfileaw}/
g/#Cnfileow/s/#Cnfileow/${cnfileow}/
w
q
EOF

echo "* ----------------------------------------------------------------------"
echo "* Namelist of OASIS3: namcouple"
echo "* ----------------------------------------------------------------------"
cat namcouple
echo "* ----------------------------------------------------------------------"
echo "*    end of namcouple"
echo "* ----------------------------------------------------------------------"
echo ""

#------------------------------------------------------------------------------
#-- Namelist ECHAM5
#

#
# resumed or initial run?
#
if [ ${jobnum} = 1 ] && [ ${atm_restart} = 0 ]; then
  rerun=.FALSE.
else
  rerun=.TRUE.
fi

#---wiso-code
if [ ${lwiso} = "true" ]; then
  if [ ${jobnum} = 1 ] && [ ${wiso_atm_restart} = 0 ]; then
    rerun_wiso=.FALSE.
  elif [ ${jobnum} = 1 ] && [ ${wiso_atm_restart} = 1 && [ ${atm_restart} = 0 ]; then
    printf "    |- ERROR: Unsupported combination: atm_restart = 0, but wiso_atm_restart = 1\n"
    exit 0
  else
    rerun_wiso=.TRUE.
  fi
fi
#---wiso-code-end
#
# coupled or stand-alone run?
#
if [ "${ocemod}" = "" ]; then

# stand alone echam5

  lcouple=".FALSE."
  if [ ${forcing} = amip ]; then
    lamip=".TRUE."
  else
    lamip=".FALSE."
  fi
else

# echam5 coupled to ocean

  lcouple=".TRUE."
  lamip=".FALSE."
  getoff=0
  putoff=-$nadt
  na2ocsteps=`expr $dta2o / $nadt `
  no2acsteps=`expr $dto2a / $nadt `
  getocean="$no2acsteps,'steps','exact',$getoff"
  putocean="$na2ocsteps,'steps','exact',$putoff"
fi

#
# initial date of the experiment (with coupled runs: one timestep before
#    midnight)
# Initialisation of the echam time manager can take a long time if the current
# date is far from the initial date of the experiment. To improve this, we set
# the year in dt_start just one year befor the the current date.
# (Setting dt_start to the current date would lead to echam re-initialization!)
#    Note that events that do not occur on a yearly basis will not be treated
#    correctly!

if [ ${lcouple} = ".FALSE." ]; then
  date=`calc_date minus -c${caltype} -Y${atm_age} -- ${inidate}`
  year=`format_date -f4 -- ${inidate} | cut -f1 -d" "`
else
  date=`calc_date minus -c${caltype} -Y${atm_age} -s${nadt} -- ${inidate}`
  year=`format_date -f4 -- ${startdate} | cut -f1 -d" "`
  if [ ${rerun} = .TRUE. ]; then
    (( year = year - 2 ))
  fi
  if [ ${rerun} = .FALSE. ]; then
    (( year = year - 1 ))
  fi
fi
month_day_time=`format_date -f4 -s -- ${date} | cut -f2- -d" "`
date="${year} ${month_day_time}"
dt_start=`echo ${date} | tr " " ,`

#
# end date of the run
#
dt_stop=`format_date -f4 -s -- ${nextdate} | tr " " ,`

#
# rerun interval
#
if [ ${nmonth} -ne 0 ]; then
  (( nm = 12 * nyear + nmonth )) 
  put_rerun="${nm},'months','last',0"
elif [ ${nyear} -ne 0 ]; then
  put_rerun="${nyear},'years','last',0" 
elif [ ${nday} -ne 0 ]; then
  put_rerun="${nday},'days','last',0"
fi

#
# usage of the hydrology model (HD)
#
if [ ${lhd} = yes ]; then
  hd=.TRUE.
else
  hd=.FALSE.
fi

# 
# output data format
#
if [ ${out_filetype} = GRIB ]; then
  format=1
else
  format=2
fi

#
# usage of 1/0 sea land mask (not 0.5 criteria of fractional mask)
#
if [[ ${res_atm}  = T31  && (  ${alone_as_coupled} = true \
    || ${cplmod} = cosmos-aso || ${cplmod} = cosmos-asob ) ]]; then
  lslm=.true.
else
  lslm=.false.
fi

#
# CO2
#
if [ "${co2_transport}" = "true" ] && [ "${srfmod}" = "jsbach" ]; then
  ico2=1   # prognostic CO2 mass mixing ratio
else
  ico2=2   # uniform CO2 volume mixing ratio
fi

#
# Middle atmosphere
#
if [[ ${vres_atm} = 47 ]]; then
  middle_atmosphere=true
fi

echo "&RUNCTL"                               >  namelist.echam
echo "  LRESUME   = ${rerun}"               >>  namelist.echam
echo "  out_datapath = './'"                >>  namelist.echam
echo "  out_expname  = '${expid}'"          >>  namelist.echam
echo "  out_filetype = ${format}"           >>  namelist.echam
echo "  DT_START  = ${dt_start}"            >>  namelist.echam
echo "  DT_STOP   = ${dt_stop}"             >>  namelist.echam
if [[ ${nadt} != default ]]; then
  echo "  DELTA_TIME= ${nadt}."               >>  namelist.echam
fi
echo "  PUTDATA   = ${dt_write_atm},'hours','first',0" >>  namelist.echam
echo "  PUTRERUN  = ${put_rerun}"           >>  namelist.echam
echo "  TRIGFILES = 1,'months','first',0"   >>  namelist.echam
echo "  LAMIP     = ${lamip}"               >>  namelist.echam
echo "  LABORT    = .FALSE."                >>  namelist.echam
echo "  NPROCA    = ${nproca_atm}"          >>  namelist.echam
echo "  NPROCB    = ${nprocb_atm}"          >>  namelist.echam
echo "  NPROMA    = ${nproma_atm}"          >>  namelist.echam
echo "  LDEBUGEV  = .FALSE."                >>  namelist.echam
echo "  LCOUPLE   = ${lcouple}"             >>  namelist.echam
echo "  L_ORBVSOP87 = .FALSE."              >>  namelist.echam    # PG This flag turns orbital configuration on.
echo "  NO_CYCLES  = 1"                     >>  namelist.echam
echo "  LSO4      = .FALSE."                >>  namelist.echam
echo "  LHD       = ${hd}"                  >>  namelist.echam
if [ "${srfmod}" = "jsbach" ]; then
  echo "  LSLM      = ${lslm}"              >>  namelist.echam
fi

if [ "${co2_transport}" = "true" ] && [ "${srfmod}" = "jsbach" ]; then
  echo "  LCO2      = .TRUE."               >>  namelist.echam
fi

if [ ${volc_forc} = "true" ]; then
  echo "  L_VOLC    = .TRUE."               >>  namelist.echam
fi

if [ ${lhd} = yes ]; then
  echo "  NHD_DIAG  = 1"                    >>  namelist.echam
fi
if [ ${lcouple} = ".TRUE." ]; then
  echo "  GETOCEAN  = ${getocean}"          >>  namelist.echam
  echo "  PUTOCEAN  = ${putocean}"          >>  namelist.echam
fi
if [[ ${alone_as_coupled} = true ]]; then
  echo "  LIPCC = .TRUE."                   >>  namelist.echam
fi
if [[ ${middle_atmosphere} = true ]]; then
  echo "  LMIDATM = .TRUE."                 >>  namelist.echam
fi
echo "/"                                    >>  namelist.echam

#---wiso-code
if [ ${lwiso} = "true" ]; then
  echo "&WISOCTL"                           >>  namelist.echam
  echo "  LWISO=.TRUE."                     >>  namelist.echam
  echo "  LWISO_RERUN=${rerun_wiso}"        >>  namelist.echam
  echo "  NWISO=3"                          >>  namelist.echam
  echo "/"                                  >>  namelist.echam
fi
#---wiso-code-end

echo "&RADCTL"                              >>  namelist.echam
if [ ${lcouple} = .TRUE. ] && [ ${res_atm} = T31 ]; then
  echo "  TRIGRAD  = 120,'minutes','first',2400" >>  namelist.echam
fi
echo "  ICO2      = ${ico2}"                >>  namelist.echam
if [ "${millennium_ctrl}" = "true" ]; then
  echo "  ICH4=2"                           >>  namelist.echam
  echo "  IO3=3"                            >>  namelist.echam
  echo "  IN2O=2"                           >>  namelist.echam
  echo "  ICFC=0"                           >>  namelist.echam
  echo "  IAERO=2"                          >>  namelist.echam
  echo "  CO2VMR=256.680E-06"               >>  namelist.echam  # PG
  echo "  CH4VMR=512.161E-09"               >>  namelist.echam  # PG: changed GHG levels to 130 kya BP via PMIP
  echo "  N2OVMR=238.728E-09"               >>  namelist.echam  # PG
  echo "  cecc=0.038209"                    >>  namelist.echam  # PG
  echo "  cobld=24.2457"                    >>  namelist.echam  # PG: Added 130 kya BP orbital parameters, via PMIP
  echo "  clonp=48.320"                     >>  namelist.echam  # PG    ##! This value was incorrect, leading to a colder climate state.
# echo "  YR_PERP=800"                      >>  namelist.echam  # PG, turn OFF YR_PERP to allow for orbital forcing
                                                                #       ##! Should take values as https://wiki.lsce.ipsl.fr/pmip3/doku.php/pmip3:design:li:index
fi                                                              #       ##! for peri-180=x, do x+180-360 
if [ ${save_dblrad} = "true" ]; then
  echo "  LDBLRAD   = .TRUE."               >>  namelist.echam
fi
if [[ ${middle_atmosphere} = true ]]; then
  echo "  ICH4=3"                           >>  namelist.echam
  echo "  IN2O=3"                           >>  namelist.echam
fi
echo "/"                                    >>  namelist.echam

#uncomment the following lines for one year/month to increase
#dissipation of energy in case of numerical instability
#(e.g. high wind speed)
#echo "&DYNCTL"                              >>  namelist.echam
#echo "  ENSTDIF=1.0001"                     >>  namelist.echam
#echo "/"                                    >>  namelist.echam

if [[ ${middle_atmosphere} = true ]]; then
  echo "&DYNCTL"                            >>  namelist.echam
  echo "  VCHECK=235."                      >>  namelist.echam
  echo "  SPDRAG=0.926E-4"                  >>  namelist.echam
  echo "/"                                  >>  namelist.echam
fi

if [[ ${lcouple} = .TRUE. || ${alone_as_coupled} = true ]]; then
echo "&PHYSCTL"                             >>  namelist.echam
echo "  LCOVER = .FALSE."                   >>  namelist.echam 
echo "/"                                    >>  namelist.echam
fi
#cat > namelist.echam << EOR
#&RUNCTL
#  LRESUME   = ${rerun}
#  out_datapath = ""
#  out_expname  = "${expid}"
#  out_filetype = ${format}
#  DT_STOP   = ${dt_stop}
#  DELTA_TIME= ${nadt}.
#  PUTDATA   = ${dt_write_atm},'hours','first',0
#  PUTRERUN  = 1,'months','last',0
#  TRIGFILES = 1,'months','first',0
#  LAMIP     = ${lamip}
#  LABORT    = .FALSE.
#  NPROCA    = ${nproca_atm}
#  NPROCB    = ${nprocb_atm}
#  NPROMA    = ${nproma_atm}
#  LDEBUGEV  = .FALSE.
#  LCOUPLE   = ${lcouple}
#  NO_CYCLES  = ${no_cycles}
#  LSO4      = .FALSE.
#  LHD       = ${hd}
#  NHD_DIAG  = 1
#  GETOCEAN  = ${getocean}
#  PUTOCEAN  = ${putocean}
#/
#&PHYSCTL
#  LCOVER = .FALSE.
#/
#EOR
#
#--- Set output stream properties:
#
echo "&SET_STREAM_ELEMENT   name = 'az0l'    , lpost = 1   /" >>  namelist.echam
echo "&SET_STREAM_ELEMENT   name = 'slm'     , lpost = 1   /" >>  namelist.echam
echo "&SET_STREAM_ELEMENT   name = 'glac'    , lpost = 1   /" >>  namelist.echam
echo "&SET_STREAM_ELEMENT   name = 'runtoc'  , lpost = 1   /" >>  namelist.echam
echo "&SET_STREAM_ELEMENT   name = 'ao3'     , lpost = 1   /" >>  namelist.echam
echo "&SET_STREAM_ELEMENT   name = 'vgrat'   , lpost = 1   /" >>  namelist.echam
echo "&SET_STREAM_ELEMENT   name = 'vlt'     , lpost = 1   /" >>  namelist.echam
echo "&SET_STREAM_ELEMENT   name = 'forest'  , lpost = 1   /" >>  namelist.echam
#---wiso-code
if [ ${lwiso} = "true" ]; then
  echo "&SET_STREAM_ELEMENT   name = 'wisoruntoc'  lpost  = 1   /" >>  namelist.echam
  echo "&SET_STREAM_ELEMENT   name = 'rogl'        lpost  = 1   /" >>  namelist.echam
  echo "&SET_STREAM_ELEMENT   name = 'wisorogl'    lpost  = 1   /" >>  namelist.echam
fi
#---wiso-code-end

echo "* ----------------------------------------------------------------------"
echo "* Namelist of ECHAM5: namelist.echam"
echo "* ----------------------------------------------------------------------"
cat namelist.echam
echo "* ----------------------------------------------------------------------"
echo "*    end of namelist.echam"
echo "* ----------------------------------------------------------------------"
echo ""

#------------------------------------------------------------------------------
#-- Namelist JSBACH
#
if [ "${jsb_standalone}" = "true" ]; then
  lpost_echam=true
else
  lpost_echam=false             # Variables of the echam output will not be
fi                              #   printed twice

if [ ${jsb_standalone} = true ]; then
  #
  #-- Start/end date of the experiment
  #
  dt_start=`format_date -f4 -s -- ${inidate}`
  date=`calc_date minus -s${nsdt} -- ${nextdate}`
  dt_stop=`format_date -f4 -s -- ${date}`

  #
  # resumed or initial run?
  #
  if [ ${jobnum} = 1 ] && [ ${srf_restart} = 0 ]; then
    restart=.FALSE.
  else
    restart=.TRUE.
  fi

  #
  # rerun interval
  #
  if [ ${nmonth} -ne 0 ]; then
    (( nm = 12 * nyear + nmonth ))
    putrerun="${nm},'months','last',0"
  elif [ ${nyear} -ne 0 ]; then
    putrerun="${nyear},'years','last',0"
  elif [ ${nday} -ne 0 ]; then
    putrerun="${nday},'days','last',0"
  fi
fi

#
# Read C-pools from file only at the beginning of an initialized experiment
# To force reading of the initial C-pools during a running experiment (jobnum>1),
# or for a restarted model ( i.e. to overwrite the values from the restart file) 
# you need to either
#    - set read_cpools=true above and comment out the next three lines, or
#    - set read_cpools=true here, irrespective of the first setting above
#
if [ ${jobnum} != 1 ] || [ ${srf_restart} = 1 ] ; then
  read_cpools=false
  read_fpc=false
fi

init_running_means=false
if [[ ${dynveg} = true && ${srf_restart} = 0 \
   && $(time_between ${inidate} ${startdate} months) -eq 12 ]]; then
  init_running_means=true
fi

cat > namelist.jsbach <<EOF
&JSBACH_CTL
  STANDALONE = ${jsb_standalone}
  ! --- number of tiles ---
  NTILES = ${ntiles}

  ! --- options to activate the different jsbach modules ---
  USE_BETHY = .TRUE.
  USE_PHENOLOGY = .TRUE.
  USE_ALBEDO = .TRUE.
  USE_DYNVEG = ${dynveg}
  LCC = ${lc_change}

  ! --- output options ---
  FILE_TYPE = "${out_filetype}"
  LPOST_ECHAM = ${lpost_echam}
  DEBUG = .FALSE.
/
&ALBEDO_CTL
  USE_ALBEDOCANOPY = .FALSE.
/
&CBALANCE_CTL
  READ_CPOOLS = ${read_cpools}
/
&DYNVEG_CTL
  READ_FPC = ${read_fpc}
  DYNVEG_FEEDBACK = ${dynveg_feedback}
  INIT_RUNNING_MEANS = ${init_running_means}
/
EOF

# -- Namelists used in jsbach stand-alone runs, only

if [ ${jsb_standalone} = true ]; then
  cat >> namelist.jsbach <<EOF
&JSBALONE_CTL
  ! --- Experiment name ---
  OUT_EXPNAME = "${expid}"

  ! --- Temporal options ---
  DT_START=${dt_start}
  DT_STOP=${dt_stop}
  DELTA_TIME=${nsdt}
  PUTDATA=${dt_write},'hours','first',0
  PUTRERUN=${putrerun}

  ! --- Restart options ---
  LRESUME=${restart}
/
&JSBGRID_CTL
  ! --- Parallelization options ---
  NPROCA=${nproca_srf}
  NPROCB=${nprocb_srf}
  NPEDIM=${nproma_srf}
/
&FORCING_CTL
  !--- temperature forcing ----
  FORCING_TEMP_FILE="climate.nc"
  FORCING_TEMP_FREQU="DAILY"

  !--- precipitation forcing ----
  FORCING_PRECIP_FILE="climate.nc"
  FORCING_PRECIP_FREQU="DAILY"

  !--- longwave radiative forcing ---
  ! FORCING_LW_TYPE: kind of data used to generate radiation forcing
  !                CLOUD: fraction of sky covered by clouds (in percent)
  !                MEAN_RAD: daily/monthly means of incident longwave rad. [W/m^2].
  FORCING_LW_TYPE="MEAN_RAD"
  FORCING_LW_FILE="climate.nc"
  FORCING_LW_FREQU="DAILY"      !Forcing frequency (MONTHLY/DAILY/CONST)

  !--- shortwave radiative forcing ---
  ! FORCING_SW_TYPE: kind of data used to generate radiation forcing
  !                CLOUD: fraction of sky covered by clouds (in percent)
  !                MEAN_RAD: daily/monthly means of incident sw-rad. [W/m^2]. Here,
  !                          a table of potential radiation is needed additionally
  FORCING_SW_TYPE="MEAN_RAD"
  FORCING_TABLE_SW_POT_FREQU="DAILY"
  FORCING_TABLE_SW_POT_FILE="climate.nc"
  FORCING_SW_FREQU="DAILY"
  FORCING_SW_FILE="climate.nc"
  FORCING_SW_SCHEME="ORIG"

  ! --- CO2 forcing ---
  FORCING_CO2_FREQU="CONST"
  FORCING_CO2_CONST_CO2=3.67e-4

  ! --- wind speed forcing ---
  FORCING_WIND_FREQU="DAILY"
  FORCING_WIND_FILE="climate.nc"
/
EOF
fi
#
#--- Set output stream properties:
#
echo "&SET_STREAM_ELEMENT   name = 'az0l'    , lpost = 1   /" >>  namelist.jsbach
echo "&SET_STREAM_ELEMENT   name = 'slm'     , lpost = 1   /" >>  namelist.jsbach
echo "&SET_STREAM_ELEMENT   name = 'glac'    , lpost = 1   /" >>  namelist.jsbach
echo "&SET_STREAM_ELEMENT   name = 'runtoc'  , lpost = 1   /" >>  namelist.jsbach
echo "&SET_STREAM_ELEMENT   name = 'ao3'     , lpost = 1   /" >>  namelist.jsbach
echo "&SET_STREAM_ELEMENT   name = 'vgrat'   , lpost = 1   /" >>  namelist.jsbach
echo "&SET_STREAM_ELEMENT   name = 'vlt'     , lpost = 1   /" >>  namelist.jsbach
echo "&SET_STREAM_ELEMENT   name = 'forest'  , lpost = 1   /" >>  namelist.jsbach
echo "&SET_STREAM_ELEMENT   name = 'rogl'    , lpost = 1   /" >>  namelist.jsbach
#---wiso-code
if [ ${lwiso} = "true" ]; then
  echo "&SET_STREAM_ELEMENT   name = 'wisoruntoc'  lpost  = 1   /" >>  namelist.jsbach
  echo "&SET_STREAM_ELEMENT   name = 'wisorogl'    lpost  = 1   /" >>  namelist.jsbach
fi
#---wiso-code-end
#
echo "* ----------------------------------------------------------------------"
echo "* Namelist of JSBACH: namelist.jsbach"
echo "* ----------------------------------------------------------------------"
cat namelist.jsbach
echo "* ----------------------------------------------------------------------"
echo "*    end of namelist.jsbach"
echo "* ----------------------------------------------------------------------"
echo ""

#------------------------------------------------------------------------------
#-- Namelist MPIOM
#

if [ ${vres_oce} = 20 ]; then
  dzw="20.,20.,20.,30.,40.,50.,70.,90.,120.,150.
      ,180.,210.,250.,300.,400.,500.,600.,700.,900.,1400."
elif [ ${vres_oce} = 23 ]; then
  dzw="20.,20.,25.,25.,25.,25.,25.,30.,45.,60.
      ,90.,120.,150.,180.,210.,250.,300.,400.,500.,600.
      ,700.,900.,1400."
elif [ ${vres_oce} = 40 ]; then
  dzw="12.,10.,10.,10.,10.,10.,13.,15.,20.,25.
      ,30.,35.,40.,45.,50.,55.,60.,70.,80.,90.
      ,100.,110.,120.,130.,140.,150.,170.,180.,190.,200.
      ,220.,250.,270.,300.,350.,400.,450.,500.,500.,600."
elif [ ${vres_oce} = ""]; then
   echo 'ERROR: '
   echo '  Vertical resolution of the ocean model not specified!'
   echo ''
else
   echo 'ERROR: '
   echo '  No layerdepth known for vres_oce = '  ${vres_oce}
   echo ''
fi

#
# to allow test runs with just a few days
#
if [ ${nmonth} = 0 ] && [ ${nyear} = 0 ]; then
  nmonts=1
else 
  (( nmonts = ${nyear} * 12 + ${nmonth} ))
fi

#
# mean output
#
imean=2

#
# relaxation time for salinity
#

if [ "$coupler" = "" ]; then
  crelsal=3.8E-8
  crelsal=3.E-7
else
  crelsal=0.0
fi

#
# restarted run or start from levius
#
if [ ${jobnum} != 1 ] || [ ${oce_restart} = 1 ]; then
  istart=3
else
  istart=2
fi

cat -> OCECTL << EOF
&OCEDIM
 IE_G=${nx_oce}
 JE_G=${ny_oce}
 KE=${vres_oce}
/
&NPROCS
 NPROCX=${nproca_oce}
 NPROCY=${nprocb_oce}
/
&OCECTL
 exptid  = "$expid"
 DT      = $nodt.
 CAULAPTS= 0.0000
 CAULAPUV= 0.0060
 AUS     = 0.
 CAH00   = 1000.
 IBOLK   = 500
 DV0     = 0.2E-2
 AV0     = 0.2E-2
 CWT     = 0.5E-3
 CWA     = 0.75E-3
 CSTABEPS= 0.03
 DBACK   = 1.05E-5
 ABACK   = 5.E-5
 CRELSAL = ${crelsal}
 CDVOCON = 0.1
 NMONTS  = ${nmonts}
 IMEAN   = ${imean}
 ISTART  = ${istart}
 I3DREST = 0
 IOASISFLUX = 0
 IMOCDIAG = 1
 LDIFFDIAG = .true.
 LFORCEDIAG = .false. 
 LCONVDIAG = .false.
 LGRIDINFO = .false.
 LHFLDIAG = .false.
 LGMDIAG = .true.
 ITSDIAG = 2
 LTSTRANSPOSE = .true.
/
&OCEDZW
 CDZW = ${dzw}
/
EOF

echo "* ----------------------------------------------------------------------"
echo "* Namelist of MPIOM: OCECTL"
echo "* ----------------------------------------------------------------------"
cat OCECTL
echo "* ----------------------------------------------------------------------"
echo "*    end of OCECTL"
echo "* ----------------------------------------------------------------------"
echo ""

if [ ${lwiso} = "true" ]; then

cat -> NAMELIST_ADD << EOF
 &ADDCTL
 io_stdo_add =  10,
 kchck_add       =  0,
 mean_3D_freq_add = 2,
 rmasko      = -9e33
 nfreqts1    =  10,
 rlonts1     = -20.0,60.0,65.0,-64.0,-175.0,-145.0,-25.0,-140.0
 rlatts1     = 47.0,17.0,10.0,32.0,-53.0,50.0,64.0,5.0
 rdep1ts1    = 80.0, 80.0,80.0,80.0,80.0,80.0,80.0,80.0
 rdep2ts1    = 1000.0,1000.0,1000.0,200.0,1000.0,1000.0,1000.0,1000.0
 rdep3ts1    = 3000.0,3000.0,3000.0,300.0,2000.0,2000.0,2000.0,2000.0
 /
EOF

echo "* ----------------------------------------------------------------------"
echo "* Isotope namelist of MPIOM: NAMELIST_ADD"
echo "* ----------------------------------------------------------------------"
cat NAMELIST_ADD
echo "* ----------------------------------------------------------------------"
echo "*    end of NAMELIST_ADD"
echo "* ----------------------------------------------------------------------"
echo ""

fi

#------------------------------------------------------------------------------
#
#     5. LAUNCHING THE MODEL
#
#------------------------------------------------------------------------------

ls -al
date

# Create a test file. The date of output files will be compared to the date
# of this reference file to assure, that the output files are newer. 
# (script save_file)

echo "The date of the output files is compared to the date of this file" \
	  > reference_file
if [ ${message_passing} = MPI2 ]; then
  mpiexec -np 1 -max_np ${ntproc} oasis.x    || {
  ls -lta
  exit 1 
  }
elif [ ${message_passing} = MPI1 ]; then
  mpiexec -nnp 1 oasis.x : -nnp ${nprocatm} echam5 :  -nnp ${nprococe} mpi-om  || {
  ls -lta
  exit 1 
  }
else
  echo Invalid message passing method specified !
  exit 1
fi

date
ls -lat

#
#-- Generate profiling protocol
#

if [ -f  *.${ocemod} ]; then
  echo 'Profiling '${oceexec}' ...'
  ${cp} *.${ocemod} ${logdir}/${ocemod}.mon.out
  ${cp} *.${ocemod} mon.out
  prof ${ocemod}
fi

if [ -f  *.${atmmod} ]; then
  echo 'Profiling '${atmexec}' ...'
  ${cp} *.${atmmod} ${logdir}/${atmmod}.mon.out
  ${cp} *.${atmmod} mon.out
  prof ${atmmod}
fi

if [ -f  *.oasis.x ]; then
  echo 'Profiling '${cplexec}' ...'
  ${cp} *.oasis.x ${logdir}/oasis.mon.out
  ${cp} *.oasis.x mon.out
  prof oasis.x
fi
#------------------------------------------------------------------------------
#
#     6. POST - PROCESSING: Saving the output data
#
#------------------------------------------------------------------------------

prepare_saving

saving_error=no

#------------------------------------------------------------------------------
# Definition of some time variables
# ---------------------------------
# enddate:      last day of this run
# prevdate:     last day of the previous run 
# startyear:    year at the beginning of this run
# prevyear:     year at the last day of the previous run
# startdecade:  decade at the beginning of this run
# prevdecade:   decade at the last day of the previous run
# previd:       job-id of the previous run (from expid.log)
# prevstart:    beginning of the previous run (from expid.log)

enddate=$(calc_date minus -c${caltype} -D1 -- ${nextdate})
prevdate=$(calc_date minus -c${caltype} -D1 -- ${startdate})
startyear=$(format_date -f4 -- ${startdate} | cut -f1 -d" ")
prevyear=$(format_date -f4 -- ${prevdate} | cut -f1 -d" ")
startdecade=${startyear%?}
prevdecade=${prevyear%?}
loginfo=$(get_logpid -d ${startdate} -f ${jobdir}/${expid}.log)                
previd=${loginfo%[ ]*}
prevstart=${loginfo#*[ ]}

[ ${task} = "RUN" ] && cd ${work}/${expid}/work

#------------------------------------------------------------------------------
# Save files of the coupler (OASIS3)
#-------------------------------------
# Output data (EXPOUT)
print "    |- Save output files of the coupler $coupler"
if [ ${export} = "EXPOUT" ] || [ ${monitoring} = "yes" ]; then
  expoutdate=$(format_date -f2 -s -- ${startdate})
  expoutfiles=$(ls *_out.${expoutdate}.nc)
  for file in ${expoutfiles}; do
    save_file ${coupler} output ${file} 
  done
fi

# Log files
save_file ${coupler} log cplout cplout_${startdate}_${enddate}
save_file ${coupler} log Oasis.prt Oasis_${startdate}_${enddate}.prt

# Restart files
save_file ${coupler} restart flxatmos flxatmos_${expid}_${enddate}.nc
save_file ${coupler} restart sstocean sstocean_${expid}_${enddate}.nc

if [ ${jobnum} = 1 ]; then
  print "    |- Save input files of the coupler $coupler"
  FV_cpl=_frac
  # Grid description files (if just created)
  if [ ${gridswr} = 1 ]; then
    save_file ${coupler} input grids.nc grids_${res_atm}_${res_oce}${FV_cpl}.nc
    save_file ${coupler} input areas.nc areas_${res_atm}_${res_oce}${FV_cpl}.nc
    save_file ${coupler} input masks.nc masks_${res_atm}_${res_oce}${FV_cpl}.nc
  fi

  # SCRIP remapping matrices (if just created)
  if [ ${scripwr} = 1 ]; then
    save_file ${coupler} input \
          rmp_oces_to_atmo_CONSERV_FRACAREA.nc \
          rmp_oces_to_atmo_CONSERV_FRACAREA_${res_atm}_${res_oce}.nc
    ocetypes="oces oceu ocev"
    for type in $ocetypes;
    do
      save_file ${coupler} input \
          rmp_atmo_to_${type}_CONSERV_FRACAREA.nc \
          rmp_atmo_to_${type}_CONSERV_FRACAREA_${res_atm}_${res_oce}.nc
    done
    save_file ${coupler} input \
          rmp_atmo_to_oces_BILINEA.nc \
          rmp_atmo_to_oces_BILINEA_${res_atm}_${res_oce}.nc
  fi

  # extrapolation matrix (if just created)
  if [ $extrapwr = 1 ]; then
    save_file ${coupler} input nweights nweights_${res_atm}_${res_oce}${FV_cpl}
  fi
fi
###############################################################################
#
#  Save raw output of ECHAM
#
###############################################################################
print "\n+++++ Save ECHAM5 output from $work to $data"

# check output format and save code files for first run
if [ "${out_filetype}" = "NETCDF" ]; then
  suf0=.nc
  suff=.nc
  method=tar
elif [ "${out_filetype}" = "GRIB" ];then 
  suf0=""
  suff=.grb
  method=cat
else
  printf "    |- ERROR: Unsupported output file format ${out_filetype}\n"
  exit 0
fi

expmod=${expid}_${atmmod}
datastreams="${expmod}"
[[ "${srfmod}" = "jsbach" ]] && datastreams="${datastreams} ${expmod}_co2"
[[ "${co2_transport}" = "true" ]] && datastreams="${datastreams} ${expmod}_tracer"
[[ "${save_dblrad}" = "true" ]] && datastreams="${datastreams} ${expmod}_accuflx"
#---wiso-code
if [ ${lwiso} = "true" ]; then
  datastreams="${datastreams} ${expmod}_wiso"
fi
#---wiso-code-end

# Save ECHAM raw output
print "    |- Save ECHAM5 monthly raw (and restart) files of\n       datastreams $datastreams"
for datastream in ${datastreams};do
  if [[ "${datastream}" = "${expmod}" ]];then
    substream=""
    resubstr="_echam"
  elif [[ "${datastream}" = "${expmod}_wiso" ]];then
    substream="_wiso"
    resubstr="_echam_wiso"
  else
    substream="_${datastream##*_}"
    resubstr="$substream"
  fi
#  if [[ "${datastream}" = "${expmod}_co2" ]];then
#    suf0=""
#  else
#    suf0=.nc
#  fi
  date=${startdate}
  while [[ $(later_date -- ${date} ${enddate}) = ${enddate} ]]; do
    year=$(format_date -f4 -- ${date} | cut -f1 -d" ")
    month=$(format_date -f4 -- ${date} | cut -f2 -d" ")
    ym=${year}${month}
    save_file ${atmmod} output ${expid}_${ym}.01${substream}${suf0} ${datastream}_${ym}${suff} &
    date=$(calc_date plus -c${caltype} -M1 -- ${date})
  done # months

  # Save ECHAM code files (for the first run)
  if [ ${jobnum} = 1 ]; then
    save_file ${atmmod} log ${expid}_${year}${month}.01${substream}.codes ${expid}_${atmmod}${substream}.codes
  fi

  # Save restart files
  if [[ "${datastream}" = "${expmod}_wiso" ]];then
    save_file ${atmmod} restart rerun_${expid}${substream} rerun_${expid}${resubstr}_${enddate} &
  else
    save_file ${atmmod} restart rerun_${expid}${resubstr} rerun_${expid}${resubstr}_${enddate} &
  fi
done # datastreams

if [ "${lhd}" = "yes" ]; then
  save_file ${atmmod} output ${expid}_${year}${month}.01_hd_higres.nc ${expmod}_hd_higres_${startdate}.nc &
fi     

# Save log files
if [ ${message_passing} != NONE ]; then
  save_file ${atmmod} log atmout atmout_${startdate}_${enddate}
  save_file ${atmmod} log ${atmmod}.prt0 ${atmmod}_${startdate}_${enddate}.prt0
fi

# Save hydrology restart files
if [ $lhd = yes ]; then
  print "   |- Save ECHAM5 hydrology restart files from $work in &data"
  save_file ${atmmod} restart hdrestart.nc hdrestart_${expid}_${enddate}.nc hdrestart_${expid}_${prevdate}.nc &
#---wiso-code
  if [ ${lwiso} = "true" ]; then
    print "   |- Save ECHAM5 isotope hydrology restart files from $work in &data"
    save_file ${atmmod} restart hdrestart_wiso.nc hdrestart_wiso_${expid}_${enddate}.nc hdrestart_wiso_${expid}_${prevdate}.nc &
  fi
#---wiso-code-end
fi

###############################################################################
#
#  Save output files of JSBACH
#
###############################################################################
print "\n+++++ Save JSBACH raw output\n"

if [ ${out_filetype} = NETCDF ]; then
  suf0=.nc
  suff=.nc
  method=tar
elif [ ${out_filetype} = GRIB ];then 
  suf0=""
  suff=.grb
  method=cat
  if [ ${jobnum} = 1 ]; then
    save_file ${srfmod} log ${expid}_${year}${month}.01_land.codes   \
                            ${expid}_${srfmod}_land.codes
    save_file ${srfmod} log ${expid}_${year}${month}.01_jsbach.codes \
                            ${expid}_${srfmod}.codes
    save_file ${srfmod} log ${expid}_${year}${month}.01_veg.codes \
                            ${expid}_${srfmod}_veg.codes
    if [ ${jsb_standalone} = true  ]; then
      save_file ${srfmod} log ${expid}_${year}${month}.01_driving.codes   \
                            ${expid}_${srfmod}_driving.codes
      save_file ${srfmod} log ${expid}_${year}${month}.01_forcing.codes   \
                            ${expid}_${srfmod}_forcing.codes
    else
      save_file ${srfmod} log ${expid}_${year}${month}.01_surf.codes   \
                            ${expid}_${srfmod}_surf.codes
    fi
    if [ ${lwiso} = "true"  ]; then
      save_file ${srfmod} log ${expid}_${year}${month}.01_la_wiso.codes   \
                            ${expid}_${srfmod}_land_wiso.codes
    fi
  fi
else
  echo "ERROR: Unsupported output file format ${out_filetype} for ${srfmod}"
  exit 0
fi

# save raw JSBACH output

outmod=${exphome}/outdata/${srfmod}
expmod=${expid}_${srfmod}
datastreams="${expmod} ${expmod}_land ${expmod}_veg"
if [ ${jsb_standalone} = true  ]; then
  datastreams="${datastreams} ${expmod}_driving ${expmod}_forcing"
else
  datastreams="${datastreams} ${expmod}_surf"
fi
#---wiso-code
if [ ${lwiso} = "true" ]; then
  datastreams="${datastreams} ${expmod}_jsbach_wiso ${expmod}_land_wiso ${expmod}_surf_wiso"
fi
#---wiso-code-end
 
tar_suff="${suff}"

for datastream in ${datastreams};do
  if [[ "${datastream}" = "${expmod}" ]];then
    substream=""
    origsubstream="jsbach"
  elif [[ "${datastream}" = "${expmod}_jsbach_wiso" ]];then
    substream="jsbach_wiso"
    origsubstream="js_wiso"
  elif [[ "${datastream}" = "${expmod}_land_wiso" ]];then
    substream="_land_wiso"
    origsubstream="la_wiso"
  elif [[ "${datastream}" = "${expmod}_surf_wiso" ]];then
    substream="surf_wiso"
    origsubstream="sf_wiso"
  else
    substream="${datastream##*_}"
    origsubstream="$substream"
  fi
  date=${startdate}
  while [[ $(later_date -- ${date} ${enddate}) = ${enddate} ]]; do
    year=$(format_date -f4 -- ${date} | cut -f1 -d" ")
    month=$(format_date -f4 -- ${date} | cut -f2 -d" ")
    ym=${year}${month}
    tar_suff=$suff
    # currently no output file for substream js_wiso and sf_wiso
    if ( [ "$origsubstream" != "js_wiso" ] && [ "$origsubstream" != "sf_wiso" ] );then
      save_file ${srfmod} output ${expid}_${ym}.01_${origsubstream}${suf0} ${datastream}_${ym}${suff} &
    fi
    date=$(calc_date plus -c${caltype} -M1 -- ${date})
  done # months
  # Restart files
  # rename rerun file for isotope substreams (js_wiso -> jsbach_wiso; sf_wiso -> surf_wiso)
  if ( [ "$origsubstream" = "js_wiso" ] || [ "$origsubstream" = "sf_wiso" ] );then 
    save_file ${srfmod} restart  rerun_${expid}_${origsubstream} rerun_${expid}_${substream}_${enddate} &
  elif ( [ "$origsubstream" != "land" ] && [ "$origsubstream" != "la_wiso" ] );then # no rerun file for substreams land & la_wiso
    save_file ${srfmod} restart  rerun_${expid}_${origsubstream} \
                                         rerun_${expid}_${origsubstream}_${enddate} &
  fi
done # datastreams
###############################################################################
#
#  Save output files of MPIOM
#
###############################################################################
print "\n+++++ MPIOM output saving"

runper=${startdate}_${enddate}
### Rename and tar raw output fortran files

if [ -f fort.270 ]; then
  mv fort.270 ${expid}_oasisflux # fluxes
fi

[ "$imean" != "0" ] && mv fort.71 ${expid}_mpiom # main output

if [ -f fort.tar ]; then
  rm fort.tar
fi

# tarfile of all remaining fort.* and TIMESER.*
[ $(ls fort.* | wc -l) -ge 1 ] && tar cvf  fort.tar  fort.*

if [ -f TIMESER.asc ]; then
  cp TIMESER.asc TIMESER.${runper}.asc
  if [ -f fort.tar ]; then
    tar rvf fort.tar TIMESER.${runper}.asc
  else
    tar cvf fort.tar TIMESER.${runper}.asc
  fi
fi

if [ -f TIMESER.ext ]; then
  cp TIMESER.ext TIMESER.${runper}.ext
  if [ -f fort.tar ]; then
    tar rvf fort.tar TIMESER.${runper}.ext
  else
    tar cvf fort.tar TIMESER.${runper}.ext
  fi
fi

### save raw output from compute node on workshare
outmod=${exphome}/outdata/${ocemod}
outfile=${expid}_${ocemod}
outfile_tp="${expid}_${ocemod}_${runper}"
if [ "$imean" != "0" ]; then
   save_file ${ocemod} output ${outfile} ${outfile_tp}.ext &
# save MPIOM isotope output file
  if [ ${lwiso} = "true" ]; then
    save_file ${ocemod} output addmean_3d.nc addmean_3d_${ocemod}_${runper}.nc &
  fi
fi

### save oasisflux from compute node on workshare
outfile=${expid}_oasisflux
outfile_tp="${expid}_oasisflux_${runper}"
if [ -f ${outfile} ]; then
  save_file ${ocemod} output ${outfile} ${outfile_tp}.ext
fi

if [ -f fort.tar ] || [ -f ${outmod}/fort_${runper}.tar ] ; then
  save_file ${ocemod} output fort.tar fort_${runper}.tar
fi

# save TIMESER* to "data" directory but not individually to  archive since they are allready included in fort.tar
print "    |- Save timeseries"
if [ -f TIMESER.asc ] ||  [ -f ${outmod}/TIMESER.${runper}.asc ] ; then
  save_file ${ocemod}  output  TIMESER.asc TIMESER.${runper}.asc
fi
if [ -f TIMESER.ext ] ||  [ -f ${outmod}/TIMESER.${runper}.ext ] ; then
  save_file ${ocemod}  output  TIMESER.ext TIMESER.${runper}.ext
fi

# Restart files
# find out, which of the restart files is the newest
file=$(ls -rt Z37000 Z38000 | tail -1)

# Log files
save_file ${ocemod} log oceout oceout_${runper}
if [ ${lwiso} = "true" ]; then
  save_file ${ocemod} log addout addout_${runper}
fi

if [ "${coupler}" = "oasis3" ]; then
   save_file ${ocemod} log  mpi-om.prt0 ${ocemod}_${runper}.prt0
fi

save_file ${ocemod} restart ${file} RESTART_${expid}_${enddate} &
if [ ${lwiso} = "true" ]; then
  # save MPIOM isotope restart file
  save_file ${ocemod} restart restartw_add.nc RESTARTW_ADD_${expid}_${enddate}.nc &
fi

#------------------------------------------------------------------------------
#
# Check whether everything was saved successfully
#
#------------------------------------------------------------------------------
wait

if [ ${saving_error} = no ]; then
  print "    |+ Everything saved successfully"
  if [ -s rm.lst.$$ ] ; then
    printf "     |+ Removing files listed in file rm.lst.$$\n"
    for file in $(cat rm.lst.$$); do
      printf "      |- Removing file : $file\n"
      ${rm} $file
    done
    rm rm.lst.$$
  fi
  if [ "${rm_list}" != "" ]; then
    print "     |- Removing files ${rm_list}\n"
    ${rm} ${rm_list}
  fi
else
  printf "      |- ERROR occured: saving_error = ${saving_error}\n"
fi
 
#------------------------------------------------------------------------------
#
#     8. SUBMISSION OF THE NEXT JOB
#
#------------------------------------------------------------------------------
cd  ${jobdir}

#
# Number of the next job
#

(( nextjob = ${jobnum} + 1 ))

#
# edit .date and .log file
#

space_error="no"

echo "${nextdate} ${nextjob}" > ${expid}.date.new || { 
  space_error="yes"; echo "Could not create ${expid}.date"; 
}
cp ${expid}.log ${expid}.log.new || { 
  space_error="yes"; echo "Could not save ${expid}.log"; 
}
echo "$(date +"${datefmt}") :  ${jobnum} ${nextdate} ${jobid}  - done" >> ${expid}.log.new || {
  space_error="yes"; echo "Could not append to ${expid}.log"; 
}

if [ "${space_error}" = "no" ]; then
  mv ${expid}.date.new ${expid}.date
  mv ${expid}.log.new ${expid}.log
else
  echo "No disk space left or quota exceeded?"
  echo " - Show quota"
  quota
  exit
fi

#
# Check whether final date is reached
#

if [[ `later_date -- ${nextdate} ${findate}` = ${nextdate} ]]; then
  echo "Experiment over"
  echo "$(date +"${datefmt}") :  Experiment over" >> ${expid}.log
else
  qsub -q ace-r ${job}
fi

###############################################################################
#
#     POST PROCESSING
#
###############################################################################
#
#-- edit the postprocessing script
#
cp ${work}/${expid}/work/fort.75 ${data}/${expid}/outdata/mpiom/fort.75.${startdate}    # PG: Copy AMOC file to output directory
cd ${jobdir}

if [ ${postprocessing} = yes ]; then

  cp ${expid}.post  ${expid}.post.${nextdate}
  ed -s ${expid}.post.${nextdate} <<EOF
1,100s/Jobnum/${jobnum}/
1,100s/Startdate/${startdate}/
1,100s/Nextdate/${nextdate}/
1,100s/Findate/${findate}/
w
q
EOF

  qsub ${expid}.post.${nextdate}

fi
#------------------------------------------------------------------------------
#
#     9. EPILOGUE
#
#------------------------------------------------------------------------------

date
${job_account}
wait
print "\n This ${task} script ended                   at\t$(date | tr -s ' ' | cut -f2-4 -d' ') on host $(hostname)\n"
exit
